(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{217:function(t,e,n){"use strict";n.r(e);var s=n(0),a=Object(s.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"基于koa2-mongodb实现用户注册登录"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基于koa2-mongodb实现用户注册登录","aria-hidden":"true"}},[t._v("#")]),t._v(" 基于Koa2+MongoDB实现用户注册登录")]),t._v(" "),n("blockquote",[n("p",[t._v("这是基于Koa2+MongoDB实现的一个简单用户注册登录例子，用node以及mongodb来写后端接口操作数据库对前端来说真的太友好了。")])]),t._v(" "),n("h2",{attrs:{id:"安装依赖"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#安装依赖","aria-hidden":"true"}},[t._v("#")]),t._v(" 安装依赖")]),t._v(" "),n("p",[t._v("在我的个人项目中，用到了concurrently来进行前后端连载，只要开启一个命令即可同时运行vue项目以及node服务端接口，童鞋们可自行查阅一下资料。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("npm install koa koa-bodyparser koa-json koa-router koa-static mongoose --save\n")])])]),n("h2",{attrs:{id:"创建服务器以及连接数据库"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#创建服务器以及连接数据库","aria-hidden":"true"}},[t._v("#")]),t._v(" 创建服务器以及连接数据库")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("const koa = require('koa');\nconst KoaRouter = require('koa-router');\nconst app = new koa();\nconst router = new KoaRouter();\n//引入json\nconst json = require('koa-json');\n//解析post请求\nconst bodyParser = require('koa-bodyparser');\n//引入mongoose数据库\nconst mongoose = require('mongoose');\n//配置静态图片 否则koa-multer上传图片后在浏览器无法查看图片\nconst staticFiles = require('koa-static');\nconst path = require('path');\n\n//引入users数据表\nconst User = require('./model/User');\n//中间件\napp.use(json());\napp.use(bodyParser());\n//注意 访问时不需要增加/public前缀\napp.use(staticFiles(path.join(__dirname, './public')));\n//配置路由模块\napp.use(router.routes()).use(router.allowedMethods());\n//封装接口\nrouter.use('/api/users', require('./routers/user'));\n\n//连接数据库 数据库名webstack\nmongoose.connect('mongodb://localhost:27017/webstack', {useNewUrlParser: true, useUnifiedTopology: true}).then(()=>{\n\t\tconsole.log('数据库连接成功');\n\t\t//监听端口\n\t\tapp.listen(8888, () => {\n\t\t\tconsole.log('服务端已开启: http://localhost:8888')\n\t\t})\n\t}).catch(()=>{\n\t\tconsole.log('数据库连接失败');\n\t}\n)\n")])])]),n("h2",{attrs:{id:"定义用户数据类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#定义用户数据类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 定义用户数据类型")]),t._v(" "),n("p",[t._v("在mongodb中使用schema来定义数据模型骨架，再通过model来创建mongodb中对应的集合。简单的来说，schema用来定义数据类型如name字段为number类型，再通过model就可以对数据库进行增删改查。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("//model/user.js\nconst mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\n//定义数据类型\nconst userSchema = new Schema({\n\temail: {\n\t\ttype: String,\n\t\trequire: true\n\t},\n    password: {\n\t\ttype: String,\n\t\trequire: true\n\t},\n\tisAdmin: {\n\t\ttype: Boolean, //是否是管理员 \n\t\tdefault: false //默认false 管理员身份修改数据库即可\n\t},\n\tdate: {\n\t\ttype: Date,\n\t\tdefault: Date\n\t}\n})\n//基于数据结构创建一个叫User的表(首字母大写) 数据库中自动生成叫users\nmodule.exports = mongoose.model('User', userSchema);\n")])])]),n("h2",{attrs:{id:"用户注册接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#用户注册接口","aria-hidden":"true"}},[t._v("#")]),t._v(" 用户注册接口")]),t._v(" "),n("p",[t._v("先判断用户是否已被注册，被注册则返回提示，否则再把数据插入数据库。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('//routers/user.js\nconst KoaRouter = require(\'koa-router\');\nconst router = new KoaRouter();\n\n//引入users数据表\nconst User = require(\'../model/User\');\n/**\n * @route POST api/users/register\n * @desc 注册接口地址\n * @access 接口是公开的 即不需要token\n */\nrouter.post("/register", async ctx => {\n\t//接收参数 post\n\tconsole.log(ctx.request.body);\n\tconst findResult = await User.find({\n\t\temail: ctx.request.body.email\n\t});\n\tconsole.log(findResult);\n\t//判断是否存在该用户\n\tif(findResult.length > 0){\n\t\t//状态码\n\t\tctx.status = 400;\n\t\tctx.body = {\n\t\t\tstatus: 400,\n\t\t\tmessage: "邮箱已经被占用"\n\t\t}\n\t}else{\n        //存储到数据库\n        const newUser = new User({\n\t\t\tpassword: ctx.request.body.password,\n\t\t\temail: ctx.request.body.email\n\t\t})\n\t\t//返回给客户端 一定要await 否则会返回Not Found\n\t\tawait newUser.save().then(user =>{\n\t\t\tconsole.log(user);\n\t\t\tctx.status = 200;\n\t\t\tctx.body = {\n\t\t\t\tstatus: 200,\n\t\t\t\tmessage: "注册成功",\n\t\t\t\tuserInfo: user\n\t\t\t}\n\t\t}).catch(err =>{\n\t\t\tconsole.log(err);\n\t\t})\t\n\t}\n})\n')])])]),n("h2",{attrs:{id:"用户登录接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#用户登录接口","aria-hidden":"true"}},[t._v("#")]),t._v(" 用户登录接口")]),t._v(" "),n("p",[t._v("先判断用户是否存在，不存在则返回提示，否则进行密码验证。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('/**\n * @route POST api/users/login\n * @desc 登录接口地址 返回token\n * @access 接口是公开的 即不需要token\n */\nrouter.post("/login", async ctx => {\n\t//接收参数 post\n\tconsole.log(ctx.request.body);\n\tconst findResult = await User.find({\n\t\temail: ctx.request.body.email\n\t});\n\tconsole.log(findResult);\n\tif(findResult.length == 0){\n\t\tctx.status = 404;\n\t\tctx.body = {\n\t\t\tstatus: 404,\n\t\t\tmessage: "用户不存在"\n\t\t}\n\t}else{ \n        //验证密码是否正确\n\t\tvar result = await User.find({password: ctx.request.body.password});\n\t\tif(result.length > 0)){\n\t\t\t//返回用户信息\n\t\t\tctx.status = 200;\n\t\t\tctx.body = {\n\t\t\t\tstatus: 200,\n\t\t\t\tmessage: "登录成功",\n\t\t\t\tuserInfo: findResult[0]\n\t\t\t}\t\n\t\t}else{\n\t\t\tctx.status = 400;\n\t\t\tctx.body = {\n\t\t\t\tstatus: 400,\n\t\t\t\tmessage: "密码错误"\n\t\t\t}\n\t\t}\n\t}\n})\n')])])]),n("h2",{attrs:{id:"前端调用接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前端调用接口","aria-hidden":"true"}},[t._v("#")]),t._v(" 前端调用接口")]),t._v(" "),n("p",[t._v("前端使用技术基于vue全家桶+typescript+element-ui。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('//login.vue \nhandleSubmit(): void {\n    //表单验证\n    (this.$refs["ruleFormEle"] as any).validate((valid: Boolean) => {\n      console.log(valid);\n      if (valid) {\n        this.isLogin = true;\n        console.log("验证通过");\n        (this as any).$axios\n          .post("/api/users/login", this.ruleForm)\n          .then((res: any) => {\n            console.log(res);\n          })\n          .catch((err: any) => {\n            this.isLogin = false;\n          });\n      } else {\n        console.log("验证不通过");\n      }\n    });\n  }\n')])])])])}),[],!1,null,null,null);e.default=a.exports}}]);